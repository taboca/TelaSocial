 + Add styles with reference to be able to remove stylesheets when needed
 + Ability to kill an object ( markup and execution ) 
 + Sandboxed with Cuddlefish - initial prototype implementation 

Widget Registration

	At this point widgets can be registered using the choreographer 
	rules scripts. You cannot register a new widget in runtime. This 
	function can be implemented and is not much complex however 
	it is important to define a security model. 

	Example:

	register("widget-container.js","app",".main") 

Named Registration 

	Each widget can write to specific node ID spaces. A Node ID space
	is a referece to an existing DOM node in the current document. 

	register("widget-container.js","app",".main","targetIDrule") 

	The last parameter should be the target Id reference under 
	where a widget can register



Events to Widgets
	

	register - sets target ID, exposes sub IDs
 	init
	start
	stop
	delete

	
Storage Rules and Events


Case

	* Wiki rules
		Load s:item slashdot
		Load s:item cotidiano
		Load s.item calendar_icmc

		Register Clock as main.grid.clock
		Register Grid  as main.grid
		Register Twit  as main.grid.twit
		
		Register Calendar 
			main = Grid
			main.area = Clock
			main.area2= Twit 
			Rules cotidiano[d=new] => Twit.item 
			Rules selfCalendar => Twit.destroy



 	* Define Calendar events  
	
* Load Rules
* Set widget layout to container.names = main

Widget states 
  - init
  - delete
  - start 
  - anything? 

Widget = Calendar can generate Events over to the Widget Elements under it. These events are of the type Init/Destroy and also it can prepare RSS as events, or kick a real calendar. 


Calendar = main
	
	main.grid = Grid.js
	main.grid#area1 = main.grid.areaLeft 
	....
	main.grid#area1 = clock.js
:1



Calendar Widget 

 	Coreographer widget - sends events states to any widget under the
	scope this is registered. Event states for calendar are: 

	* Check calendar data RSS 
	* Kick states under widget 

Calendar = main
Calendar = Layout.init
Calendar check { 

	day 1 = add widget 2, space layout.one
	day 2 = add widget 2, space layout.two

} 



Case 

	Default appScope = main
	Set WIDGET appScope.existing#id match DOMElement = appScope.new

	Set Main.js    IN main match #container=grid

		Main gets constructed, 
		Main knows spaceNodeId, it renders to spaceNodeId
		Main registers its random ID 

	Events

	main.grid#start 
	main.grid.left#start
	main.grid.left#loop <- [s:slashdot.item]

	set Clock.js  	in main.grid.left 
		Does a reset
	main.grid.left#start

